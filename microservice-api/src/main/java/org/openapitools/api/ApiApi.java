/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import jakarta.validation.Valid;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.ErrorData;
import org.openapitools.model.FailureData;
import org.openapitools.model.MachineData;
import org.openapitools.model.MaintenanceData;
import java.time.OffsetDateTime;
import org.openapitools.model.TelemetryData;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.processing.Generated;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-03T09:43:42.413646-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/errors : Retrieve error data
     * Fetches recorded system errors.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiErrorsGet",
        summary = "Retrieve error data",
        description = "Fetches recorded system errors.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorData.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/errors",
        produces = { "application/json" }
    )

    default ResponseEntity<List<ErrorData>> apiErrorsGet(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"machineId\" : 0, \"errorType\" : \"errorType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"machineId\" : 0, \"errorType\" : \"errorType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/failures : Retrieve failure data
     * Fetches recorded machine failures.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiFailuresGet",
        summary = "Retrieve failure data",
        description = "Fetches recorded machine failures.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FailureData.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/failures",
        produces = { "application/json" }
    )

    default ResponseEntity<List<FailureData>> apiFailuresGet(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"machineId\" : 0, \"failureType\" : \"failureType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"machineId\" : 0, \"failureType\" : \"failureType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/machines : Retrieve machine list
     * Fetches all monitored machines and their statuses.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiMachinesGet",
        summary = "Retrieve machine list",
        description = "Fetches all monitored machines and their statuses.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MachineData.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/machines",
        produces = { "application/json" }
    )

    default ResponseEntity<List<MachineData>> apiMachinesGet(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"machineId\" : 0, \"model\" : \"model\", \"age\" : 6, \"status\" : \"active\" }, { \"machineId\" : 0, \"model\" : \"model\", \"age\" : 6, \"status\" : \"active\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/maintenance : Retrieve maintenance records
     * Fetches scheduled or completed maintenance records.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiMaintenanceGet",
        summary = "Retrieve maintenance records",
        description = "Fetches scheduled or completed maintenance records.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MaintenanceData.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/maintenance",
        produces = { "application/json" }
    )

    default ResponseEntity<List<MaintenanceData>> apiMaintenanceGet(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"component\" : \"component\", \"machineId\" : 0, \"maintenanceType\" : \"maintenanceType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"component\" : \"component\", \"machineId\" : 0, \"maintenanceType\" : \"maintenanceType\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/telemetry : Retrieve telemetry data
     * Fetches voltage, rotation, pressure, and vibration data from machines.
     *
     * @param start Start date/time for the time range (optional)
     * @param end End date/time for the time range (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiTelemetryGet",
        summary = "Retrieve telemetry data",
        description = "Fetches voltage, rotation, pressure, and vibration data from machines.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TelemetryData.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/telemetry",
        produces = { "application/json" }
    )

    default ResponseEntity<List<TelemetryData>> apiTelemetryGet(
        @Parameter(name = "start", description = "Start date/time for the time range", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,
        @Parameter(name = "end", description = "End date/time for the time range", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"machineId\" : 0, \"rotation\" : 1.4658129805029452, \"pressure\" : 5.962133916683182, \"vibration\" : 5.637376656633329, \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"voltage\" : 6.027456183070403 }, { \"machineId\" : 0, \"rotation\" : 1.4658129805029452, \"pressure\" : 5.962133916683182, \"vibration\" : 5.637376656633329, \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"voltage\" : 6.027456183070403 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
